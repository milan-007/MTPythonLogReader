#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
import sys
import os
import logging

from src import LogReader
import info as i

from PySide2.QtCore import Qt, QCoreApplication, Signal, QIODevice, QTimer, qDebug

from PySide2.QtWidgets import QApplication

from PySide2.QtNetwork import QLocalServer, QLocalSocket


class SingleApplication(QApplication):

    messageAvailable = Signal(object)

    def __init__(self, argv, key):
        super().__init__(argv)
        self.m_socket = QLocalSocket()
        self.m_socket.connectToServer(key, QIODevice.WriteOnly)
        self._running = self.m_socket.waitForConnected(1000)

    def isRunning(self):
        return self._running


class SingleApplicationWithMessaging(SingleApplication):
    def __init__(self, argv, key):
        super().__init__(argv, key)
        self._key = key
        self._timeout = 1000
        if not self.isRunning():
            self._server = QLocalServer(self)
            self._server.newConnection.connect(self.handleMessage)
            self._server.listen(self._key)

    def handleMessage(self):
        #qDebug("Handle")
        socket = self._server.nextPendingConnection()
        if socket.waitForReadyRead(self._timeout):
            #qDebug("před čtením")
            m = socket.readAll().data().decode('utf-8')
            # qDebug(m)
            self.messageAvailable.emit(m)
            socket.disconnectFromServer()
        else:
            qDebug(socket.errorString())

    def sendMessage(self, message):
        if self.isRunning():
            socket = QLocalSocket(self)
            socket.connectToServer(self._key, QIODevice.WriteOnly)
            qDebug("Connected")
            if not socket.waitForConnected(self._timeout):
                print(socket.errorString())
                return False
            if not isinstance(message, bytes):
                message = message.encode('utf-8')
            socket.write(message)
            qDebug(f"Odesláno: {message}")
            if not socket.waitForBytesWritten(self._timeout):
                print(socket.errorString())
                return False
            socket.disconnectFromServer()
            return True
        return False


def setAppPath(launcher: str):
    return os.path.dirname(launcher)


def setAppAttributes(a: QApplication):
    a.setApplicationName(i.applicationName)
    a.setOrganizationName(i.organisationName)
    a.setOrganizationDomain(i.web)
    pass


def setLogger(logPath: str, logFileName: str):
    logPath = os.path.join(i.appPath, logPath)
    os.makedirs(logPath, exist_ok=True)
    logFilePath = os.path.join(logPath, logFileName)
    logging.basicConfig(
        filename=logFileName,
        format="%(asctime)s [%(levelname)s] %(module)s: %(lineno)d\
        %(funcName)s:  %(message)s",
        level=logging.DEBUG,
        datefmt='%d %H:%M:%S',
        filemode="w"
    )
    logger = logging.getLogger(logFilePath)
    pass


if __name__ == '__main__':
    arg = sys.argv
    QCoreApplication.setAttribute(Qt.AA_ShareOpenGLContexts)
    app = SingleApplicationWithMessaging(arg, i.applicationName)
    setAppAttributes(app)
    if app.isRunning():
        m = 'app is already running'
        print("Posláno : " + m)
        if len(sys.argv) > 1:
            m = "Posláno : " + ' '.join(sys.argv[1:])
        app.sendMessage(m)
        sys.exit()

    i.appPath = setAppPath(arg[0])
    setLogger("logs", "LogReader.log")

    window = LogReader.LogReader()
    app.messageAvailable.connect(window.handleMessage)
    window.show()

    sys.exit(app.exec_())
